<?php
/**
 * IdentityDataOrganisation
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Core
 *
 * All included utility endpoints for Basiq partners
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * IdentityDataOrganisation Class Doc Comment
 *
 * @category Class
 * @description Organisation data.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class IdentityDataOrganisation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'IdentityData_organisation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'agent_first_name' => 'string',
        'agent_last_name' => 'string',
        'agent_role' => 'string',
        'business_name' => 'string',
        'legal_name' => 'string',
        'short_name' => 'string',
        'abn' => 'string',
        'acn' => 'string',
        'is_acnc_registered' => 'bool',
        'industry_code' => 'string',
        'industry_code_version' => 'string',
        'organisation_type' => 'string',
        'registered_country' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'agent_first_name' => null,
        'agent_last_name' => null,
        'agent_role' => null,
        'business_name' => null,
        'legal_name' => null,
        'short_name' => null,
        'abn' => null,
        'acn' => null,
        'is_acnc_registered' => null,
        'industry_code' => null,
        'industry_code_version' => null,
        'organisation_type' => null,
        'registered_country' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'agent_first_name' => false,
		'agent_last_name' => false,
		'agent_role' => false,
		'business_name' => false,
		'legal_name' => false,
		'short_name' => false,
		'abn' => false,
		'acn' => false,
		'is_acnc_registered' => false,
		'industry_code' => false,
		'industry_code_version' => false,
		'organisation_type' => false,
		'registered_country' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'agent_first_name' => 'agentFirstName',
        'agent_last_name' => 'agentLastName',
        'agent_role' => 'agentRole',
        'business_name' => 'businessName',
        'legal_name' => 'legalName',
        'short_name' => 'shortName',
        'abn' => 'abn',
        'acn' => 'acn',
        'is_acnc_registered' => 'isACNCRegistered',
        'industry_code' => 'industryCode',
        'industry_code_version' => 'industryCodeVersion',
        'organisation_type' => 'organisationType',
        'registered_country' => 'registeredCountry'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'agent_first_name' => 'setAgentFirstName',
        'agent_last_name' => 'setAgentLastName',
        'agent_role' => 'setAgentRole',
        'business_name' => 'setBusinessName',
        'legal_name' => 'setLegalName',
        'short_name' => 'setShortName',
        'abn' => 'setAbn',
        'acn' => 'setAcn',
        'is_acnc_registered' => 'setIsAcncRegistered',
        'industry_code' => 'setIndustryCode',
        'industry_code_version' => 'setIndustryCodeVersion',
        'organisation_type' => 'setOrganisationType',
        'registered_country' => 'setRegisteredCountry'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'agent_first_name' => 'getAgentFirstName',
        'agent_last_name' => 'getAgentLastName',
        'agent_role' => 'getAgentRole',
        'business_name' => 'getBusinessName',
        'legal_name' => 'getLegalName',
        'short_name' => 'getShortName',
        'abn' => 'getAbn',
        'acn' => 'getAcn',
        'is_acnc_registered' => 'getIsAcncRegistered',
        'industry_code' => 'getIndustryCode',
        'industry_code_version' => 'getIndustryCodeVersion',
        'organisation_type' => 'getOrganisationType',
        'registered_country' => 'getRegisteredCountry'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('agent_first_name', $data ?? [], null);
        $this->setIfExists('agent_last_name', $data ?? [], null);
        $this->setIfExists('agent_role', $data ?? [], null);
        $this->setIfExists('business_name', $data ?? [], null);
        $this->setIfExists('legal_name', $data ?? [], null);
        $this->setIfExists('short_name', $data ?? [], null);
        $this->setIfExists('abn', $data ?? [], null);
        $this->setIfExists('acn', $data ?? [], null);
        $this->setIfExists('is_acnc_registered', $data ?? [], null);
        $this->setIfExists('industry_code', $data ?? [], null);
        $this->setIfExists('industry_code_version', $data ?? [], null);
        $this->setIfExists('organisation_type', $data ?? [], null);
        $this->setIfExists('registered_country', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets agent_first_name
     *
     * @return string|null
     */
    public function getAgentFirstName()
    {
        return $this->container['agent_first_name'];
    }

    /**
     * Sets agent_first_name
     *
     * @param string|null $agent_first_name Agent first name.
     *
     * @return self
     */
    public function setAgentFirstName($agent_first_name)
    {
        if (is_null($agent_first_name)) {
            throw new \InvalidArgumentException('non-nullable agent_first_name cannot be null');
        }
        $this->container['agent_first_name'] = $agent_first_name;

        return $this;
    }

    /**
     * Gets agent_last_name
     *
     * @return string|null
     */
    public function getAgentLastName()
    {
        return $this->container['agent_last_name'];
    }

    /**
     * Sets agent_last_name
     *
     * @param string|null $agent_last_name Agent last name.
     *
     * @return self
     */
    public function setAgentLastName($agent_last_name)
    {
        if (is_null($agent_last_name)) {
            throw new \InvalidArgumentException('non-nullable agent_last_name cannot be null');
        }
        $this->container['agent_last_name'] = $agent_last_name;

        return $this;
    }

    /**
     * Gets agent_role
     *
     * @return string|null
     */
    public function getAgentRole()
    {
        return $this->container['agent_role'];
    }

    /**
     * Sets agent_role
     *
     * @param string|null $agent_role Agent role.
     *
     * @return self
     */
    public function setAgentRole($agent_role)
    {
        if (is_null($agent_role)) {
            throw new \InvalidArgumentException('non-nullable agent_role cannot be null');
        }
        $this->container['agent_role'] = $agent_role;

        return $this;
    }

    /**
     * Gets business_name
     *
     * @return string|null
     */
    public function getBusinessName()
    {
        return $this->container['business_name'];
    }

    /**
     * Sets business_name
     *
     * @param string|null $business_name Business name.
     *
     * @return self
     */
    public function setBusinessName($business_name)
    {
        if (is_null($business_name)) {
            throw new \InvalidArgumentException('non-nullable business_name cannot be null');
        }
        $this->container['business_name'] = $business_name;

        return $this;
    }

    /**
     * Gets legal_name
     *
     * @return string|null
     */
    public function getLegalName()
    {
        return $this->container['legal_name'];
    }

    /**
     * Sets legal_name
     *
     * @param string|null $legal_name Legal name.
     *
     * @return self
     */
    public function setLegalName($legal_name)
    {
        if (is_null($legal_name)) {
            throw new \InvalidArgumentException('non-nullable legal_name cannot be null');
        }
        $this->container['legal_name'] = $legal_name;

        return $this;
    }

    /**
     * Gets short_name
     *
     * @return string|null
     */
    public function getShortName()
    {
        return $this->container['short_name'];
    }

    /**
     * Sets short_name
     *
     * @param string|null $short_name Short name.
     *
     * @return self
     */
    public function setShortName($short_name)
    {
        if (is_null($short_name)) {
            throw new \InvalidArgumentException('non-nullable short_name cannot be null');
        }
        $this->container['short_name'] = $short_name;

        return $this;
    }

    /**
     * Gets abn
     *
     * @return string|null
     */
    public function getAbn()
    {
        return $this->container['abn'];
    }

    /**
     * Sets abn
     *
     * @param string|null $abn Australian Business Number.
     *
     * @return self
     */
    public function setAbn($abn)
    {
        if (is_null($abn)) {
            throw new \InvalidArgumentException('non-nullable abn cannot be null');
        }
        $this->container['abn'] = $abn;

        return $this;
    }

    /**
     * Gets acn
     *
     * @return string|null
     */
    public function getAcn()
    {
        return $this->container['acn'];
    }

    /**
     * Sets acn
     *
     * @param string|null $acn Australian Company Number.
     *
     * @return self
     */
    public function setAcn($acn)
    {
        if (is_null($acn)) {
            throw new \InvalidArgumentException('non-nullable acn cannot be null');
        }
        $this->container['acn'] = $acn;

        return $this;
    }

    /**
     * Gets is_acnc_registered
     *
     * @return bool|null
     */
    public function getIsAcncRegistered()
    {
        return $this->container['is_acnc_registered'];
    }

    /**
     * Sets is_acnc_registered
     *
     * @param bool|null $is_acnc_registered Indicates whether is Australian Company Number registered.
     *
     * @return self
     */
    public function setIsAcncRegistered($is_acnc_registered)
    {
        if (is_null($is_acnc_registered)) {
            throw new \InvalidArgumentException('non-nullable is_acnc_registered cannot be null');
        }
        $this->container['is_acnc_registered'] = $is_acnc_registered;

        return $this;
    }

    /**
     * Gets industry_code
     *
     * @return string|null
     */
    public function getIndustryCode()
    {
        return $this->container['industry_code'];
    }

    /**
     * Sets industry_code
     *
     * @param string|null $industry_code Industry Code.
     *
     * @return self
     */
    public function setIndustryCode($industry_code)
    {
        if (is_null($industry_code)) {
            throw new \InvalidArgumentException('non-nullable industry_code cannot be null');
        }
        $this->container['industry_code'] = $industry_code;

        return $this;
    }

    /**
     * Gets industry_code_version
     *
     * @return string|null
     */
    public function getIndustryCodeVersion()
    {
        return $this->container['industry_code_version'];
    }

    /**
     * Sets industry_code_version
     *
     * @param string|null $industry_code_version Industry Code Version.
     *
     * @return self
     */
    public function setIndustryCodeVersion($industry_code_version)
    {
        if (is_null($industry_code_version)) {
            throw new \InvalidArgumentException('non-nullable industry_code_version cannot be null');
        }
        $this->container['industry_code_version'] = $industry_code_version;

        return $this;
    }

    /**
     * Gets organisation_type
     *
     * @return string|null
     */
    public function getOrganisationType()
    {
        return $this->container['organisation_type'];
    }

    /**
     * Sets organisation_type
     *
     * @param string|null $organisation_type Organisation Type.
     *
     * @return self
     */
    public function setOrganisationType($organisation_type)
    {
        if (is_null($organisation_type)) {
            throw new \InvalidArgumentException('non-nullable organisation_type cannot be null');
        }
        $this->container['organisation_type'] = $organisation_type;

        return $this;
    }

    /**
     * Gets registered_country
     *
     * @return string|null
     */
    public function getRegisteredCountry()
    {
        return $this->container['registered_country'];
    }

    /**
     * Sets registered_country
     *
     * @param string|null $registered_country Registered Country.
     *
     * @return self
     */
    public function setRegisteredCountry($registered_country)
    {
        if (is_null($registered_country)) {
            throw new \InvalidArgumentException('non-nullable registered_country cannot be null');
        }
        $this->container['registered_country'] = $registered_country;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


